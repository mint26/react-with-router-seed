//mobile-first approach
@mixin mobile-respond-to($breakpoint){
  @if map-has-key($breakpoints, $breakpoint) {
    @media screen and (min-width: #{map-get($breakpoints, $breakpoint)}){
      @content;
    }
  }
}

//desktop-first approach
@mixin desktop-respond-to($breakpoint){
  @if map-has-key($breakpoints, $breakpoint) {
    @media screen and (max-width: #{map-get($breakpoints, $breakpoint)}){
      @content;
    }
  }
}

//font-face
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote("/" + $path + "." + $extmod)) format(quote($format)), comma);
	}
	
	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}

@mixin clearfix {
	&::after {
			content: "";
			display: table;
			clear: both;
	}
}

@mixin absCenter {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

@mixin calc($property, $expression) { 
  #{$property}: -webkit-calc(#{$expression}); 
  #{$property}: -moz-calc(#{$expression});
  #{$property}: calc(#{$expression}); 
} 